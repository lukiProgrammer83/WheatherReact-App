{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","onChange","change","placeholder","Result","_props$weather","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","components_Form","src_components_Result","Component","ReactDOM","render","src_components_App","document","getElementById"],"mappings":"gRAkBeA,EAjBF,SAAAC,GACT,OAEIC,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAEIC,KAAK,OACLC,MAAOL,EAAMK,MACbC,SAAUN,EAAMO,OAChBC,YAAY,kCCmBbC,SA3BA,SAAAT,GAAS,IAAAU,EAEQV,EAAMW,QAD1BC,EADYF,EACZE,KAAMC,EADMH,EACNG,KAAMC,EADAJ,EACAI,QAASC,EADTL,EACSK,OAAQC,EADjBN,EACiBM,KACjCC,EAFgBP,EAEhBO,SAAUC,EAFMR,EAENQ,KAAMC,EAFAT,EAEAS,IAChBC,EAAU,KACd,IAAKD,GAAON,EAAM,CACd,IAAMQ,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAC3CH,EACInB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuB,SAAA,KACIxB,EAAAC,EAAAC,cAAA,qCAA4BF,EAAAC,EAAAC,cAAA,UAAKU,GAAjC,KACAZ,EAAAC,EAAAC,cAAA,sCAA8BS,GAC9BX,EAAAC,EAAAC,cAAA,mCAA0BF,EAAAC,EAAAC,cAAA,UAAKa,EAAL,WAC1Bf,EAAAC,EAAAC,cAAA,kDAA6BkB,GAC7BpB,EAAAC,EAAAC,cAAA,kDAA6BqB,GAC7BvB,EAAAC,EAAAC,cAAA,6CAA2Be,EAA3B,QACAjB,EAAAC,EAAAC,cAAA,sCAAyBc,EAAzB,SAKZ,OACIhB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,UACVP,EAAG,mBAAAQ,OAAsBd,GAASO,KCwGhCQ,oNAvHbC,MAAQ,CACNxB,MAAO,GACPO,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,KAAK,KAEPW,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZ5B,MAAO0B,EAAEG,OAAO7B,2FA8CD8B,EAAWC,GAAW,IAAAC,EAAAC,KAEvC,GAAgC,IAA5BA,KAAKT,MAAMxB,MAAMkC,QACjBH,EAAU/B,QAAUiC,KAAKT,MAAMxB,MAAO,CACxC,IAAMmC,EAAG,oDAAAb,OAC6CW,KAAKT,MAAMxB,MADxD,WAAAsB,OAlEA,mCAkEA,iBAGTc,MAAMD,GACHE,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,6BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACJ,IAAMC,GAAO,IAAI1B,MAAO2B,iBACxBZ,EAAKJ,SAAS,SAAAG,GAAS,MAAK,CAC1BjB,KAAK,EACLP,KAAMoC,EACNlC,QAASiC,EAAKG,IAAIpC,QAClBC,OAAQgC,EAAKG,IAAInC,OACjBC,KAAM+B,EAAKI,KAAKnC,KAChBC,SAAU8B,EAAKI,KAAKlC,SACpBC,KAAM6B,EAAK7B,KAAKkC,MAChBvC,KAAMuB,EAAU/B,WAGnBgD,MAAM,SAAAlC,GACLmC,QAAQC,IAAIpC,GACZkB,EAAKJ,SAAS,SAAAG,GAAS,MAAK,CAC1BjB,KAAK,EACLN,KAAMuB,EAAU/B,6CAcxB,OACEJ,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAACqD,EAAD,CACEnD,MAAOiC,KAAKT,MAAMxB,MAClBE,OAAQ+B,KAAKR,oBAIf7B,EAAAC,EAAAC,cAACsD,EAAD,CAAQ9C,QAAS2B,KAAKT,gBAlHZ6B,cCFlBC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.864de791.chunk.js","sourcesContent":["import React from 'react';\r\nconst Form = props => {\r\n    return (\r\n        // <form onSubmit={props.submit}>\r\n        <form>\r\n            <input\r\n\r\n                type=\"text\"\r\n                value={props.value}\r\n                onChange={props.change}\r\n                placeholder=\"Wpisz miejscowość\"\r\n            />\r\n            {/* <button>Wyszukaj miejscowość</button> */}\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\nconst Result = props => {\r\n    const { date, city, sunrise, sunset, temp,\r\n        pressure, wind, err } = props.weather\r\n    let content = null;\r\n    if (!err && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n        content = (\r\n            <>\r\n                <h3>Wyniki wyszukiwania dla <em>{city}</em> </h3>\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <h4>Aktualna temperatura: <em>{temp} &#176;C</em></h4>\r\n                <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n                <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n                <h4>Aktualna siłą wiatru: {wind} m/s</h4>\r\n                <h4>Aktualne ciśnienie: {pressure} hPa</h4>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            {err ? `Nie mam w bazie ${city}` : content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form'\nimport Result from './Result';\nimport './App.css';\n\n// Klucz do API:\nconst APIKey = 'a741b9ad38cc64697f8b2abe1cbcf354'\n\nclass App extends Component {\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n  // do wersji z buttonem\n\n  // handleCitySubmit = e => {\n  //   e.preventDefault()\n  //   console.log(\"potwierdzony formularz\");\n  //   const API =\n  //     `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n  //   fetch(API)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response\n  //       }\n  //       throw Error(\"Nie udało się\")\n  //     })\n  //     .then(response => response.json())\n  //     .then(data => {\n  //       const time = new Date().toLocaleString()\n  //       this.setState(prevState => ({\n  //         err: false,\n  //         date: time,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         temp: data.main.temp,\n  //         pressure: data.main.pressure,\n  //         wind: data.wind.speed,\n  //         city: prevState.value,\n  //       }))\n  //     })\n  //     .catch(err => {\n  //       console.log(err);\n  //       this.setState(prevState => ({\n  //         err: true,\n  //         city: prevState.value\n  //       }))\n  //     })\n  // }\n\n\n  // componentDidUpdate() {\n  //   console.log(\"zamontowany\");\n  // }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"zmiana\");\n    if (this.state.value.length === 0) return\n    if (prevState.value !== this.state.value) {\n      const API =\n        `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString()\n          this.setState(prevState => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: prevState.value,\n          }))\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }))\n        })\n    }\n\n\n\n\n\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n        // submit={this.handleCitySubmit}\n        />\n\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}